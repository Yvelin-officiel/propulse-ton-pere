name: Invalid PR

on:

  pull_request_target:
    types: [opened]
    branches:
      - 'releases/**'

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      write-all
    steps:
      - name: Vérifier la branche source
        id: check_branch
        run: |
          if [[ "${{ github.head_ref }}" == "main" || "${{ github.head_ref }}" == bug/* || "${{ github.head_ref }}" == feature/* ]]; then
            echo "ok=true" >> $GITHUB_OUTPUT
          else
            echo "ok=false" >> $GITHUB_OUTPUT
          fi
      - name: Fermer la PR si branche source invalide
        if: steps.check_branch.outputs.ok == 'false'
        uses: superbrothers/close-pull-request@v3
        with:
          comment: "La branche source doit être 'main' ou commencer par 'bug/'."
      - uses: actions/checkout@v4
      - uses: typst-community/setup-typst@v3
      - name: Build avec Makefile
        run: make build
      - name: Build documentation
        run: make manual
      - name: Check code style
        run: make check
      - name: Format code
        run: make format
      - name: Schema validation
        run:
          make schema
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Hash et message du commit dans les variables d'environnement
        run: |
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
          echo "GIT_MESSAGE<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=%B >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Générer le changelog de la branche source
        id: changelog
        run: |
          if [[ "${GITHUB_HEAD_REF}" == "main" ]]; then
            TITLE="## Changelog de la MEP (main)"
          elif [[ "${GITHUB_HEAD_REF}" == bug/* ]]; then
            TITLE="## Changelog de la release bug (${GITHUB_HEAD_REF})"
          elif [[ "${GITHUB_HEAD_REF}" == feature/* ]]; then
            TITLE="## Changelog de la release feature (${GITHUB_HEAD_REF})"
          else
            TITLE="## Changelog de la PR (${GITHUB_HEAD_REF})"
          fi
          echo "$TITLE" > changelog.md
          git fetch origin "${GITHUB_HEAD_REF}" "${GITHUB_BASE_REF}"
          git log "origin/${GITHUB_BASE_REF}..origin/${GITHUB_HEAD_REF}" --pretty=format:"- %s" >> changelog.md
          {
            echo "CHANGELOG<<EOF"
            cat changelog.md
            echo "EOF"
          } >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag de la release
        id: extract_tag
        run: |
          TAG_NAME=$(echo "${{ github.base_ref }}" | sed -E 's#^releases/##')
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
      - name: Publier la release automatiquement
        uses: mini-bomba/create-github-release@v1.1.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG_NAME }}
          prerelease: true
          name: "Latest Commit, that compiles"
          body: |
            This automatic prerelease is built from commit ${{ env.GIT_HASH }} and was triggered by @${{ github.actor }}
            [Github Actions workflow run that built this prerelease](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Message du commit :
            ${{ env.GIT_MESSAGE }}
            
            Changelog :
            ${{ env.CHANGELOG }}
          files: |
            doc/manual.pdf
          clear_attachments: true